generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  role      UserRole
  createdAt DateTime   @default(now())
  phone     String
  shipments Shipment[]
  messages  Message[]

  @@map("users")
}

model Shipment {
  id                 String         @id @default(uuid())
  alias              String
  cargowiseId        String?        @unique
  mode               ModeOfShipment
  freightClass       FreightClass
  originAddress      String
  destinationAddress String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @default(now())
  isActive           Boolean        @default(false)
  goGreen            Boolean        @default(false)
  messages           Message[]
  users              User[]
  emails             Email[]
  exceptions         Exception[]
  Attachment         Attachment[]
  metaData           Json?
  @@map("shipments")
}

model Email {
  id           String        @id
  from         String
  to           String
  subject      String
  body         String        @db.LongText
  timestamp    DateTime      @default(now())
  shipmentId   String
  shipment     Shipment      @relation(fields: [shipmentId], references: [id])
  threadEmails ThreadEmail[]
  tone         String?
  reply        String?       @db.LongText
  eventKeys    String?       @db.LongText

  @@index([shipmentId])
  @@map("shipment_emails")
}

model ThreadEmail {
  id        String   @id @unique
  from      String
  body      String
  parentId  String
  parent    Email    @relation(fields: [parentId], references: [id])
  timestamp DateTime @default(now())
  tone      String?
  reply     String?  @db.LongText
  eventKeys String?  @db.LongText

  @@index([parentId])
  @@map("shipment_thread_emails")
}

model Attachment {
  id                String   @id @default(uuid())
  name              String
  type              String
  from              String
  messageId         String
  gmailAttachmentId String   @db.LongText
  shipmentId        String
  shipment          Shipment @relation(fields: [shipmentId], references: [id])
  timestamp         DateTime @default(now())

  @@index([shipmentId])
  @@map("shipment_attachments")
}

model Exception {
  id          String        @id @default(uuid())
  from        String
  body        String
  gptResponse String
  tone        ExceptionTone
  timestamp   DateTime      @default(now())
  shipmentId  String
  shipment    Shipment      @relation(fields: [shipmentId], references: [id])

  @@index([shipmentId])
  @@map("shipment_exceptions")
}

model Message {
  id              String   @id @default(uuid())
  isAutoGenerated Boolean  @default(false)
  gmailRefId      String?  @unique
  from            String
  to              String
  subject         String?
  content         String
  attachments     Json?
  shipmentId      String
  shipment        Shipment @relation(fields: [shipmentId], references: [id])
  timestamp       DateTime @default(now())
  authorId        String
  author          User     @relation(fields: [authorId], references: [id])

  @@index([shipmentId])
  @@index([authorId])
  @@map("shipment_messages")
}

enum UserRole {
  Admin
  Sales
  Ops
}

enum ModeOfShipment {
  Air
  Sea
}

enum FreightClass {
  LCL
  FCL
  AirCargo
  AirCourier
}

enum ExceptionTone {
  Notice
  Negative
}
